package jack.code.crypto;import java.security.Key;import java.security.KeyFactory;import java.security.KeyPair;import java.security.KeyPairGenerator;import java.security.PrivateKey;import java.security.PublicKey;import java.security.SecureRandom;import java.security.Signature;import java.security.interfaces.DSAPrivateKey;import java.security.interfaces.DSAPublicKey;import java.security.spec.PKCS8EncodedKeySpec;import java.security.spec.X509EncodedKeySpec;import java.util.HashMap;import java.util.Map;public class DSAEncryption {	public static final String ALGORITHM = "DSA";	private static final int KEY_SIZE = 1024;	private static final String DEFAULT_SEED = "0f22507a10bbddd07d8a3082122966e3";	private static final String PUBLIC_KEY = "DSAPublicKey";	private static final String PRIVATE_KEY = "DSAPrivateKey";	/**	 * 私钥对信息生成数字签名	 */	public static String sign(byte[] data, String privateKey) throws Exception {		byte[] keyBytes = HashEncryption.decryptBASE64(privateKey);		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);		KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);		PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);		Signature signature = Signature.getInstance(keyFactory.getAlgorithm());		signature.initSign(priKey);		signature.update(data);		return HashEncryption.encryptBASE64(signature.sign());	}	/**	 * 公钥验证数字签名	 */	public static boolean verify(byte[] data, String publicKey, String sign) throws Exception {		byte[] keyBytes = HashEncryption.decryptBASE64(publicKey);		X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);		KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);		PublicKey pubKey = keyFactory.generatePublic(keySpec);		Signature signature = Signature.getInstance(keyFactory.getAlgorithm());		signature.initVerify(pubKey);		signature.update(data);		return signature.verify(HashEncryption.decryptBASE64(sign));	}	/**	 * 生成密钥	 */	public static Map<String, Object> initKey(String seed) throws Exception {		KeyPairGenerator keygen = KeyPairGenerator.getInstance(ALGORITHM);		SecureRandom secureRandom = new SecureRandom();		secureRandom.setSeed(seed.getBytes());		keygen.initialize(KEY_SIZE, secureRandom);		KeyPair keys = keygen.genKeyPair();		DSAPublicKey publicKey = (DSAPublicKey) keys.getPublic();		DSAPrivateKey privateKey = (DSAPrivateKey) keys.getPrivate();		Map<String, Object> map = new HashMap<String, Object>(2);		map.put(PUBLIC_KEY, publicKey);		map.put(PRIVATE_KEY, privateKey);		return map;	}	public static Map<String, Object> initKey() throws Exception {		return initKey(DEFAULT_SEED);	}	public static String getPrivateKey(Map<String, Object> keyMap) throws Exception {		Key key = (Key) keyMap.get(PRIVATE_KEY);		return HashEncryption.encryptBASE64(key.getEncoded());	}	public static String getPublicKey(Map<String, Object> keyMap) throws Exception {		Key key = (Key) keyMap.get(PUBLIC_KEY);		return HashEncryption.encryptBASE64(key.getEncoded());	}}