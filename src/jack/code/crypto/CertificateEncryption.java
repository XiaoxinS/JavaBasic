package jack.code.crypto;import java.io.FileInputStream;import java.security.KeyStore;import java.security.PrivateKey;import java.security.PublicKey;import java.security.Signature;import java.security.cert.Certificate;import java.security.cert.CertificateFactory;import java.security.cert.X509Certificate;import java.util.Date;import javax.crypto.Cipher;public class CertificateEncryption {	/**	 * Java密钥库(Java Key Store，JKS)KEY_STORE	 */	public static final String KEY_STORE = "JKS";	public static final String X509 = "X.509";	/**	 * 由KeyStore获得私钥	 */	private static PrivateKey getPrivateKey(String keyStorePath, String alias, String password) throws Exception {		KeyStore ks = getKeyStore(keyStorePath, password);		PrivateKey key = (PrivateKey) ks.getKey(alias, password.toCharArray());		return key;	}	/**	 * 由Certificate获得公钥	 */	private static PublicKey getPublicKey(String certificatePath) throws Exception {		Certificate certificate = getCertificate(certificatePath);		PublicKey key = certificate.getPublicKey();		return key;	}	/**	 * 获得Certificate	 */	private static Certificate getCertificate(String certificatePath) throws Exception {		CertificateFactory certificateFactory = CertificateFactory.getInstance(X509);		FileInputStream in = new FileInputStream(certificatePath);		Certificate certificate = certificateFactory.generateCertificate(in);		in.close();		return certificate;	}	/**	 * 获得Certificate	 */	private static Certificate getCertificate(String keyStorePath, String alias, String password) throws Exception {		KeyStore ks = getKeyStore(keyStorePath, password);		Certificate certificate = ks.getCertificate(alias);		return certificate;	}	/**	 * 获得KeyStore	 */	private static KeyStore getKeyStore(String keyStorePath, String password) throws Exception {		FileInputStream is = new FileInputStream(keyStorePath);		KeyStore ks = KeyStore.getInstance(KEY_STORE);		ks.load(is, password.toCharArray());		is.close();		return ks;	}	/**	 * 私钥加密	 */	public static byte[] encryptByPrivateKey(byte[] data, String keyStorePath, String alias, String password) throws Exception {		// 取得私钥		PrivateKey privateKey = getPrivateKey(keyStorePath, alias, password);		// 对数据加密		Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());		cipher.init(Cipher.ENCRYPT_MODE, privateKey);		return cipher.doFinal(data);	}	/**	 * 私钥解密	 */	public static byte[] decryptByPrivateKey(byte[] data, String keyStorePath, String alias, String password) throws Exception {		// 取得私钥		PrivateKey privateKey = getPrivateKey(keyStorePath, alias, password);		// 对数据加密		Cipher cipher = Cipher.getInstance(privateKey.getAlgorithm());		cipher.init(Cipher.DECRYPT_MODE, privateKey);		return cipher.doFinal(data);	}	/**	 * 公钥加密	 */	public static byte[] encryptByPublicKey(byte[] data, String certificatePath) throws Exception {		// 取得公钥		PublicKey publicKey = getPublicKey(certificatePath);		// 对数据加密		Cipher cipher = Cipher.getInstance(publicKey.getAlgorithm());		cipher.init(Cipher.ENCRYPT_MODE, publicKey);		return cipher.doFinal(data);	}	/**	 * 公钥解密	 */	public static byte[] decryptByPublicKey(byte[] data, String certificatePath) throws Exception {		// 取得公钥		PublicKey publicKey = getPublicKey(certificatePath);		// 对数据加密		Cipher cipher = Cipher.getInstance(publicKey.getAlgorithm());		cipher.init(Cipher.DECRYPT_MODE, publicKey);		return cipher.doFinal(data);	}	/**	 * 验证Certificate	 */	public static boolean verifyCertificate(String certificatePath) {		return verifyCertificate(new Date(), certificatePath);	}	/**	 * 验证Certificate是否过期或无效	 */	public static boolean verifyCertificate(Date date, String certificatePath) {		boolean status = true;		try {			// 取得证书			Certificate certificate = getCertificate(certificatePath);			// 验证证书是否过期或无效			status = verifyCertificate(date, certificate);		} catch (Exception e) {			status = false;		}		return status;	}	/**	 * 验证Certificate	 */	public static boolean verifyCertificate(Date date, String keyStorePath, String alias, String password) {		boolean status = true;		try {			Certificate certificate = getCertificate(keyStorePath, alias, password);			status = verifyCertificate(date, certificate);		} catch (Exception e) {			status = false;		}		return status;	}	/**	 * 验证Certificate	 */	public static boolean verifyCertificate(String keyStorePath, String alias, String password) {		return verifyCertificate(new Date(), keyStorePath, alias, password);	}	/**	 * 验证证书是否过期或无效	 */	private static boolean verifyCertificate(Date date, Certificate certificate) {		boolean status = true;		try {			X509Certificate x509Certificate = (X509Certificate) certificate;			x509Certificate.checkValidity(date);		} catch (Exception e) {			status = false;		}		return status;	}	/**	 * 签名	 */	public static String sign(byte[] sign, String keyStorePath, String alias, String password) throws Exception {		// 获得证书		X509Certificate x509Certificate = (X509Certificate) getCertificate(keyStorePath, alias, password);		// 获取私钥		KeyStore ks = getKeyStore(keyStorePath, password);		PrivateKey privateKey = (PrivateKey) ks.getKey(alias, password.toCharArray());		// 构建签名		Signature signature = Signature.getInstance(x509Certificate.getSigAlgName());		signature.initSign(privateKey);		signature.update(sign);		return HashEncryption.encryptBASE64(signature.sign());	}	/**	 * 验证签名	 */	public static boolean verify(byte[] data, String sign, String certificatePath) throws Exception {		// 获得证书		X509Certificate x509Certificate = (X509Certificate) getCertificate(certificatePath);		// 获得公钥		PublicKey publicKey = x509Certificate.getPublicKey();		// 构建签名		Signature signature = Signature.getInstance(x509Certificate.getSigAlgName());		signature.initVerify(publicKey);		signature.update(data);		return signature.verify(HashEncryption.decryptBASE64(sign));	}}