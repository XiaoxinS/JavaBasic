package jack.code.crypto;import java.security.MessageDigest;import javax.crypto.KeyGenerator;import javax.crypto.Mac;import javax.crypto.SecretKey;import javax.crypto.spec.SecretKeySpec;import org.apache.commons.codec.binary.Base64;/** *  * @author xuejiancun@gmail.com *  */public class HashEncryption {	public static final String KEY_MD5 = "MD5";	public static final String KEY_SHA = "SHA";	/**	 * <pre>	 * HmacMD5  	 * HmacSHA1  	 * HmacSHA256  	 * HmacSHA384  	 * HmacSHA512	 * </pre>	 */	public static final String KEY_MAC = "HmacMD5";	// ================================ BASE64 =============================== //	public static String encryptBASE64(byte[] data) {		return new String(Base64.encodeBase64(data));	}	public static byte[] decryptBASE64(String data) {		return Base64.decodeBase64(data.getBytes());	}	// ================================ MD5 =============================== //	public static String encryptMD5(byte[] data) throws Exception {		MessageDigest md5 = MessageDigest.getInstance(KEY_MD5);		md5.update(data);		return new String(md5.digest());	}	// ================================ SHA =============================== //	public static String encryptSHA(byte[] data) throws Exception {		MessageDigest sha = MessageDigest.getInstance(KEY_SHA);		sha.update(data);		return new String(sha.digest());	}	// ================================ HMAC =============================== //	public static String initMacKey() throws Exception {		KeyGenerator keyGenerator = KeyGenerator.getInstance(KEY_MAC);		SecretKey secretKey = keyGenerator.generateKey();		return encryptBASE64(secretKey.getEncoded());	}	public static byte[] encryptHMAC(byte[] data, String key) throws Exception {		SecretKey secretKey = new SecretKeySpec(decryptBASE64(key), KEY_MAC);		Mac mac = Mac.getInstance(secretKey.getAlgorithm());		mac.init(secretKey);		return mac.doFinal(data);	}}