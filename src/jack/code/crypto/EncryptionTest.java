package jack.code.crypto;import java.util.Map;public class EncryptionTest {	public static void main(String[] args) throws Exception {		String username = "jack.xue";		String encrypt_username = "";		String decrypt_username = "";		System.out.println("========================================================");		System.out.println("original username: " + username);		System.out.println("========================================================");		// BASE64		encrypt_username = HashEncryption.encryptBASE64(username.getBytes());		System.out.println("encrypt by BASE64: " + encrypt_username);		decrypt_username = new String(HashEncryption.decryptBASE64(encrypt_username));		System.out.println("decrypt by BASE64: " + decrypt_username);		System.out.println("========================================================");		// MD5		encrypt_username = HashEncryption.encryptMD5(username.getBytes());		System.out.println("encrypt by MD5: " + encrypt_username);		System.out.println("========================================================");		// SHA		encrypt_username = HashEncryption.encryptSHA(username.getBytes());		System.out.println("encrypt by SHA: " + encrypt_username.getBytes());		System.out.println("========================================================");		// HMAC		String macKey = HashEncryption.initMacKey();		encrypt_username = new String(HashEncryption.encryptHMAC(username.getBytes(), macKey));		System.out.println("mac key: " + macKey);		System.out.println("encrypt by HMAC: " + new String(encrypt_username.getBytes()));		System.out.println("========================================================");		// SymmetryEncryption => DES/3DES/AES/etc.		String key = SymmetryEncryption.initKey();		encrypt_username = HashEncryption.encryptBASE64(SymmetryEncryption.encrypt(username.getBytes(), key));		System.out.println("key: " + key);		System.out.println("encrypt by DES: " + encrypt_username);		decrypt_username = new String(SymmetryEncryption.decrypt(HashEncryption.decryptBASE64(encrypt_username), key));		System.out.println("decrypt by DES: " + decrypt_username);		System.out.println("========================================================");		// PBE		String pwd = "StrongPassword";		byte[] salt = PBEEncryption.initSalt();		encrypt_username = HashEncryption.encryptBASE64(PBEEncryption.encrypt(username.getBytes(), pwd, salt));		decrypt_username = new String(PBEEncryption.decrypt(HashEncryption.decryptBASE64(encrypt_username), pwd, salt));		System.out.println("encrypt by PBE: " + encrypt_username);		System.out.println("decrypt by PBE: " + decrypt_username);		System.out.println("========================================================");		// RSA		// 1. encrypt by publicKey, decrypt by privateKey		Map<String, Object> keyMap = RSAEncryption.initKey();		String publicKey = RSAEncryption.getPublicKey(keyMap);		String privateKey = RSAEncryption.getPrivateKey(keyMap);		byte[] encodedData = RSAEncryption.encryptByPublicKey(username.getBytes(), publicKey);		byte[] decodedData = RSAEncryption.decryptByPrivateKey(encodedData, privateKey);		System.out.println("privateKey: " + privateKey);		System.out.println("publicKey: " + publicKey);		System.out.println("encrypt by publicKey: " + new String(encodedData));		System.out.println("decrypt by privateKey: " + new String(decodedData));		// 2. encrypt by privateKey, decrypt by publicKey		encodedData = RSAEncryption.encryptByPrivateKey(username.getBytes(), privateKey);		decodedData = RSAEncryption.decryptByPublicKey(encodedData, publicKey);		System.out.println("encrypt by privateKey: " + new String(encodedData));		System.out.println("decrypt by publicKey: " + new String(decodedData));		// 3. sign		String sign = RSAEncryption.sign(encodedData, privateKey);		System.out.println("sign:\r" + sign);		boolean status = RSAEncryption.verify(encodedData, publicKey, sign);		System.out.println("status:\r" + status);		System.out.println("========================================================");		// DH		Map<String, Object> aKeyMap = DHEncryption.initKey();		String aPublicKey = DHEncryption.getPublicKey(aKeyMap);		String aPrivateKey = DHEncryption.getPrivateKey(aKeyMap);		Map<String, Object> bKeyMap = DHEncryption.initKey(aPublicKey);		String bPublicKey = DHEncryption.getPublicKey(bKeyMap);		String bPrivateKey = DHEncryption.getPrivateKey(bKeyMap);		byte[] aCode = DHEncryption.encrypt(username.getBytes(), aPublicKey, bPrivateKey);		byte[] aDecode = DHEncryption.decrypt(aCode, bPublicKey, aPrivateKey);		System.out.println("encrypt by a's publicKey, b's privateKey: " + new String(aCode));		System.out.println("decrypt by b's publicKey, a's privateKey: " + new String(aDecode));				byte[] bCode = DHEncryption.encrypt(username.getBytes(), bPublicKey, aPrivateKey);		byte[] bDecode = DHEncryption.decrypt(aCode, aPublicKey, bPrivateKey);		System.out.println("encrypt by b's publicKey, a's privateKey: " + new String(bCode));		System.out.println("decrypt by a's publicKey, b's privateKey: " + new String(bDecode));		System.out.println("========================================================");				// DSA		Map<String, Object> keyPair = DSAEncryption.initKey();				String cpulicKey = DSAEncryption.getPublicKey(keyPair);		String cprivateKey = DSAEncryption.getPrivateKey(keyPair);				System.out.println("publicKey: " + cpulicKey);		System.out.println("privateKey: " + cprivateKey);				String asign = DSAEncryption.sign(username.getBytes(), cprivateKey);		System.out.println("sign: " + asign);				boolean astatus = DSAEncryption.verify(username.getBytes(), cpulicKey, asign);		System.out.println("status: " + astatus);		System.out.println("========================================================");				// Certificate			}}